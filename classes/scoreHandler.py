from datetime import datetime, timedelta
from calendar import monthrange
from models import Score, Goals, Activity
from extensions import db
from models import MyWords

class ScoreAnalyzer:
    def __init__(self):
        pass

    def sumGoal(self, score_list):
        goal_summary = {}
        for row in score_list:
            goal_name = row.goalName or 'Ok칛nt m친l'  # Hantera None
            time = row.Time or 0                     # Hantera None

            if goal_name not in goal_summary:
                goal_summary[goal_name] = 0

            goal_summary[goal_name] += time

        return goal_summary

    def sumDays(self, score):
        daySum = {}
        for row in score:
            day = row.Date
            time = row.Time or 0  # Om time 칛r None, ers칛tt med 0
            if day not in daySum:
                daySum[day] = 0  # 游릭 Initiera med 0 om dagen inte finns
            daySum[day] += time  # L칛gg till tiden f칬r den dagen

        return daySum

    def sumAct(self, score):
        actSum = {}
        for row in score:
            actName=row.actName
            time=row.Time or 0
            
            if actName not in actSum:
                actSum[actName] = 0
            
            actSum[actName] += time
        return actSum


class UserScores(ScoreAnalyzer):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = user_id
    
    def get_weekly_scores(self):
        today = datetime.now()  # Byt fr친n utcnow() till now()
        start_of_this_week = today - timedelta(days=today.weekday())  # F친r m친ndag denna vecka (kl 00:00)
        start_of_last_week = start_of_this_week - timedelta(days=7)  # M친ndag f칬rra veckan
        end_of_last_week = start_of_this_week - timedelta(days=1)  # S칬ndag f칬rra veckan
        
        # H칛mta po칛ng fr친n databasen
        this_week_scores = db.session.query(
            Score.Date, db.func.sum(Score.Time).label('total_points')
        ).filter(
            Score.user_id == self.user_id,
            Score.Date >= start_of_this_week.date(),  # Fixar m친ndagsproblemet
            Score.Date <= today.date()  # Endast till idag, ej framtida poster
        ).group_by(Score.Date).all()

        last_week_scores = db.session.query(
            Score.Date, db.func.sum(Score.Time).label('total_points')
        ).filter(
            Score.user_id == self.user_id,
            Score.Date >= start_of_last_week.date(),  # Anv칛nder .date() f칬r att j칛mf칬ra r칛tt
            Score.Date <= end_of_last_week.date()
        ).group_by(Score.Date).all()

        activity_times = db.session.query(
            Activity.name,
            db.func.sum(Score.Time).label('total_time')
        ).join(Score).filter(
            Score.user_id == self.user_id,
            Score.Date.between(start_of_this_week.date(), today.date())
        ).group_by(Activity.name).all()

        return this_week_scores, last_week_scores, activity_times


    def get_scores_by_period(self, period='week', reference_date=None):
        today = datetime.now().date()

        if reference_date is None:
            reference_date = today
        elif isinstance(reference_date, datetime):
            reference_date = reference_date.date()

        if period == 'week':
            start_date = reference_date - timedelta(days=reference_date.weekday())
            # Om vi 칛r i aktuell vecka, sluta idag, annars s칬ndag den veckan
            if reference_date.isocalendar()[1] == today.isocalendar()[1] and reference_date.year == today.year:
                end_date = today
            else:
                end_date = start_date + timedelta(days=6)  # S칬ndag samma vecka

        elif period == 'month':
            # F칬rsta dagen i m친naden
            start_date = reference_date.replace(day=1)
            # Om samma m친nad och 친r som idag, sluta idag, annars sista dagen i m친naden
            if reference_date.month == today.month and reference_date.year == today.year:
                end_date = today
            else:
                last_day = monthrange(reference_date.year, reference_date.month)[1]  # Sista dagen i m친naden
                end_date = reference_date.replace(day=last_day)

        elif period == 'year':
            # F칬rsta januari
            start_date = reference_date.replace(month=1, day=1)
            # Om samma 친r, sluta idag, annars 31 december
            if reference_date.year == today.year:
                end_date = today
            else:
                end_date = reference_date.replace(month=12, day=31)
        else:
            raise ValueError("Ogiltig period. V칛lj 'week', 'month', eller 'year'.")

        # 游댷 Debug utskrift om du vill se datumen (kan tas bort)
        print(f"Period: {period}, Start: {start_date}, End: {end_date}")

        # H칛mta po칛ng fr친n Score
        scores = db.session.query(
            Score.Time.label('Time'),              # Po칛ng/tid
            Score.Date.label('Date'),              # Datum
            Goals.name.label('goalName'),         # M친l-namn
            Activity.name.label('actName')   # Aktivitet-namn
        ).outerjoin(
            Goals, Goals.id == Score.goal_id
        ).outerjoin(
            Activity, Activity.id == Score.activity_id
        ).filter(
            Score.user_id == self.user_id,
            Score.Date >= start_date,
            Score.Date <= end_date
        ).all()

            # H칛mta aktivitetstider per aktivitet inom samma period
        activity_times = db.session.query(
            Activity.name.label('activity_name'),          # Namnet p친 aktiviteten
            Goals.name.label('goal_name'),                # Namnet p친 m친let som aktiviteten tillh칬r
            db.func.sum(Score.Time).label('total_time')   # Summan av tid f칬r aktiviteten
        ).join(
            Score, Score.activity_id == Activity.id          # Join till Score baserat p친 aktiviteten
        ).outerjoin(
            Goals, Goals.id == Activity.goal_id           # Join till Goals baserat p친 goal_id
        ).filter(
            Score.user_id == self.user_id,
            Score.Date >= start_date,
            Score.Date <= end_date
        ).group_by(
            Activity.name, Goals.name                    # Gruppera b친de p친 aktivitet och m친l
        ).all()
        
        return scores, activity_times
    

    def myDayScore(self, day_offset=0):
        # Ber칛kna streaks-po칛ng
        date = datetime.now().date() - timedelta(days=day_offset)

        streak_points = db.session.query(db.func.sum(Score.Time)).filter(
            Score.user_id == self.user_id,
            db.func.date(Score.Date) == date,
            Score.activity_id == None  # Streaks har ingen aktivitet kopplad
        ).scalar() or 0

        # Ber칛kna aktivitetspo칛ng
        activity_points = db.session.query(db.func.sum(Score.Time)).filter(
            Score.user_id == self.user_id,
            db.func.date(Score.Date) == date,
            Score.activity_id != None  # Po칛ng kopplade till aktiviteter
        ).scalar() or 0

        # Totalpo칛ng
        total_points = streak_points + activity_points

        # Returnera totalpo칛ng och en ordbok med detaljer
        return total_points, {
            "streak_points": streak_points,
            "activity_points": activity_points
        }
